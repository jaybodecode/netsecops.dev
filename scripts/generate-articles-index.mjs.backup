import { readdir, readFile, writeFile, stat } from 'fs/promises'
import { join } from 'path'

async function getAllJsonFiles(dirPath) {
  const files = []
  
  async function scanDir(currentPath) {
    const items = await readdir(currentPath)
    
    for (const item of items) {
      const itemPath = join(currentPath, item)
      const itemStat = await stat(itemPath)
      
      if (itemStat.isDirectory()) {
        await scanDir(itemPath)
      } else if (item.endsWith('.json')) {
        files.push(itemPath)
      }
    }
  }
  
  await scanDir(dirPath)
  return files
}

async function generateArticlesIndex() {
  try {
    console.log('üîÑ Generating articles index...')
    
    // Path to articles directory
    const articlesDir = join(process.cwd(), 'public/data/articles')
    
    // Get all article files recursively
    const jsonFiles = await getAllJsonFiles(articlesDir)
    
    const articles = []
    
    // Read and transform each article
    for (const filePath of jsonFiles) {
      try {
        const content = await readFile(filePath, 'utf-8')
        const article = JSON.parse(content)
        
        // Transform CyberArticle to ArticleMetadata for listings
        const metadata = {
          id: article.id,
          slug: article.slug,
          title: article.title,
          headline: article.headline,
          publishedAt: article.extract_datetime,
          excerpt: article.summary,
          tags: article.tags || [],
          categories: Array.isArray(article.category) ? article.category : (article.category ? [article.category] : []),
          readingTime: article.reading_time_minutes || 5,
          imageUrl: article.featured_image_url,
          // Extract severity directly from article data
          severity: article.severity || 'informational',
          // Map author from sources if available
          author: article.sources && article.sources.length > 0 ? {
            name: article.sources[0]?.title || 'Security Team',
            role: 'Security Analyst'
          } : {
            name: 'CyberNet Security',
            role: 'Security Team'
          }
        }
        
        articles.push(metadata)
      } catch (error) {
        console.warn(`Failed to parse article file: ${filePath}`, error)
        continue
      }
    }
    
    // Sort articles by published date (newest first)
    articles.sort((a, b) => new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime())
    
    // Create the index structure
    const articlesIndex = {
      articles,
      totalCount: articles.length,
      lastUpdated: new Date().toISOString()
    }
    
    // Write the generated index
    const outputPath = join(process.cwd(), 'public/data/articles-index.json')
    await writeFile(outputPath, JSON.stringify(articlesIndex, null, 2))
    
    console.log(`‚úÖ Generated articles index with ${articles.length} articles`)
    
  } catch (error) {
    console.error('‚ùå Error generating articles index:', error)
    process.exit(1)
  }
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  generateArticlesIndex()
}

export { generateArticlesIndex }